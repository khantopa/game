{"version":3,"sources":["components/mode/Mode.jsx","components/symbol/Symbol.jsx","components/player/Player.jsx","components/board/Board.jsx","App.js","serviceWorker.js","index.js"],"names":["modeButton","map","mode","key","to","pathname","state","role","className","Mode","Symbol","props","symbol","color","imgUrl","style","backgroundColor","backgroundImage","defaultProps","Player","player","name","score","Board","UNSAFE_componentWillMount","location","setState","player1","type","player2","reset","winner","decideWinner","isDisabled","runGame","counter","myInterval","setInterval","symbols","Math","floor","random","clearInterval","this","playButtons","disabled","onClick","modeTypeButtons","Fragment","Component","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2a93c60.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Mode.scss';\n\nconst modes = [ 'Player vs Computer', 'Computer vs Computer' ];\n\nconst modeButton = modes.map(mode => (  \n  <Link key = { mode } to={{\n      pathname: '/play',\n      state: {\n        mode: mode\n      }\n    }} role=\"button\" className=\"mode_group_button\">\n    { mode } \n  </Link>\n)); \n\nconst Mode = () => {\n  return (\n    <div className=\"mode\">  \n      <h2 className=\"mode_head\">Select your play mode</h2>\n      <div className=\"mode_group\">\n        { modeButton }\n      </div>\n    </div>\n  );\n}\n\n\nexport default Mode;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Symbol.scss';\n\n\nconst Symbol =(props) => {\n  const { symbol, color } = props;\n  const imgUrl = `../../../assets/${symbol}.png`;\n  const style = {\n    backgroundColor: color,\n    backgroundImage: `url(${imgUrl})`,\n  }\n  return <div className=\"symbol\" style = { style } ></div>\n}\n\n\nSymbol.defaultProps = {\n  symbol: \"\",\n  color: \"#D8EEF2\"\n};\n\n\nSymbol.propTypes = {\n  color: PropTypes.string.isRequired,\n  symbol: PropTypes.string.isRequired\n}\n\n\nexport default Symbol;\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Player.scss';\n\nimport Symbol from '../symbol/Symbol';\n\n\nconst Player = (props) => {\n\n  const player = props.player;\n  return (\n    <div className=\"player\">\n      <h5 className=\"player_type\">\n        { player.name }: &nbsp;\n        <span className=\"player_score\"> { player.score }  </span>\n      </h5>\n      <Symbol symbol= { player.symbol } />\n    </div>\n  );\n}\n\nPlayer.propTypes = {\n  player: PropTypes.object.isRequired\n}\n\nexport default Player;\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nimport Player from '../player/Player';\nimport Symbol from '../symbol/Symbol';\n\nimport './Board.scss';\n\n\nexport default class Board extends Component {\n\n  constructor(props) {\n    super(props);\n    this.isDisabled = false;\n    this.symbols = [\"rock\" , \"paper\", \"scissors\"]\n    this.state = {\n      mode: 'Player vs Computer',\n      player1: { name: 'User', symbol: '', score: 0, type: 'user' },\n      player2: { name: 'Computer', symbol: '', score: 0, type: 'computer' },\n      winner: \"Start a new Game\"\n    }\n  }\n\n\n  UNSAFE_componentWillMount = () => {\n    if(this.props.location.state) {\n      const mode = this.props.location.state.mode;\n      if(mode === 'Computer vs Computer') {\n        const player1 = { name: 'Computer 1', symbol: '', score: 0, type: 'computer' };\n        const player2 = { name: 'Computer 2', symbol: '', score: 0, type: 'computer' };\n        this.setState({ mode: mode, player1: player1, player2: player2 });\n      }\n    }\n  }\n\n  // RESET THE GAME TO INITIAL STATE\n  reset = () => {\n    const player1 = this.state.player1;\n    const player2 = this.state.player2;\n    this.setState({\n      player1: { ...player1, symbol: '', score: 0 },\n      player2: { ...player2, symbol: '', score: 0 },\n      winner: 'Start a new Game'\n    })\n  }\n\n  // DECIDE WINNER BASED ON THE STATE\n  decideWinner = ()=> {\n    const player1 = this.state.player1;\n    const player2 = this.state.player2;\n\t\tif(player1.symbol === player2.symbol) {\n      this.isDisabled = false;\n\t\t\treturn \"Draw !\"\n\t\t}\n\t\tif((player1.symbol === \"rock\" && player2.symbol === \"scissors\") ||\n\t\t\t(player1.symbol === \"paper\" && player2.symbol === \"rock\") ||\n\t\t\t(player1.symbol === \"scissors\" && player2.symbol === \"paper\")) {\n          this.setState({...player1, score: player1.score++ })\n          this.isDisabled = false;\n          return `${ player1.name } wins !`\n    }\n    this.setState({ ...player2, score: player2.score++ });\n    this.isDisabled = false;\n\t\treturn `${ player2.name } wins !`\n\t}\n\n  // METHOD TO RUN A GAMEs\n\trunGame = (symbol) => {\n    this.isDisabled = true;\n    const player1 = this.state.player1;\n    const player2 = this.state.player2;\n    let counter = 0;\n\t\tlet myInterval = setInterval(() => {\n      counter++;\n      this.setState({\n        player1: { ...player1, symbol: this.symbols[Math.floor(Math.random()*3)] },\n        player2: { ...player2, symbol: this.symbols[Math.floor(Math.random()*3)] },\n        winner: \"\"\n      })\n\t\t\tif(counter > 15) {\n        if(symbol) {\n          this.setState({ player1: { ...player1, symbol: symbol } })\n        } \n\t\t\t\tclearInterval(myInterval)\n\t\t\t\tthis.setState({ winner: this.decideWinner() })\n\t\t\t}\n\t\t},100)\n\t}\n\n  render() {    \n\n    // VARIABLES FOR STATE\n    const mode = this.state.mode;\n    const player1 = this.state.player1;\n    const player2 = this.state.player2;\n\n    // LOOPING FOR USER PLAYER BUTTONS\n    const playButtons = this.symbols.map(symbol => (      \n      <button className = \"play_button_item \" disabled = { this.isDisabled } \n        onClick = { () => this.runGame(symbol) } \n        key = { symbol } >\n        <Symbol symbol = {symbol} color = \"#FFFEFC\" />\n      </button> \n    ))\n    \n\n    // MODE TYPE BUTTONS\n    const modeTypeButtons =  (\n      <React.Fragment>\n        { mode === 'Player vs Computer' \n        ? <React.Fragment>\n            <p className = \"play_text\">Choose any to play:</p> \n            <div className=\"play_button\">{ playButtons }</div>\n          </React.Fragment>\n        : <div className=\"play_run\">\n            <button className = \"play_run_button\" disabled = { this.isDisabled } \n              onClick = { () => this.runGame() }>\n              <Symbol symbol = \"play\" color = \"#FFFEFC\" />\n            </button>  \n          </div>\n        }\n      </React.Fragment>\n    )\n\n    return (\n      <div className=\"play\">\n        <h3 className=\"play_title\">{ mode }</h3>\n        <div className=\"play_board\">\n          <div className=\"play_board_players\">\n            <Player player = { player1 } />\n            <Player player = { player2 } />\n          </div>\n          <br/>\n          <br/>\n          <div className=\"play_board_result\">\n            <p className=\"play_board_result_text\">{ this.state.winner }</p>\n          </div>\n        </div>\n        { modeTypeButtons }\n        <div className=\"play_footer\">\n          <Link to=\"/\" className = \"play_footer_button change_mode\">\n            CHANGE MODE\n          </Link>\n          <button onClick={this.reset} className = \"play_footer_button reset\" >RESET</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nBoard.propTypes = {\n  mode: PropTypes.string\n}","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Mode from './components/mode/Mode';\nimport Board from './components/board/Board';\n\nimport './App.scss';\n\n\nfunction App() {\n  return (\n   <div className=\"App\">\n    <Router>\n      <Route exact path=\"/\" component={ Mode } />\n      <Route path=\"/play\" component= { Board }/>\n    </Router>\n   </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}